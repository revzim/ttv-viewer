"use strict";
const streamer = window.location.pathname.split("/")[2];

let toggle_alert = function(toggle) {
  let alert_elem = document.getElementById("alert");
  var start_text = "loading " + streamer + "'s stream. please wait";
  if (toggle) {
      alert_elem.innerText = start_text, alert_elem.style.display = "block";
      var i = 0;
      return setInterval(function() {
          4 == ++i ? (alert_elem.innerText = start_text, i = 0) : alert_elem.innerText += "."
      }, 250)
  }
  return alert_elem.innerText = "", alert_elem.style.display = "none", -1 != alert_interval_id && clearInterval(alert_interval_id), -1
};

const player_settings = {
  constraints: {
    height: (window.innerHeight * 0.05),
    width: 0,
  },

}

let init_player = function() {
  var opts = {
    width: window.innerWidth - player_settings.constraints.width,
    height: window.innerHeight - player_settings.constraints.height,
    channel: streamer,
    parent: ["test"]
  };
  const embed = new Twitch.Embed("vid", opts);

  const player = embed._player;

  var start_time = Date.now();

  let player_state_id = setInterval(function() {
    var state = player.getPlayerState();
    if ("Playing" === state.playback || "Ready" === state.playback) clearInterval(player_state_id), player_state_id = null, toggle_alert(!1), document.getElementById("vid").style.display = "block", player.setQuality(player.getQualities()[1].group);
    else if (1e4 < Date.now() - start_time) {
      clearInterval(player_state_id), toggle_alert(!1);
      let alert_elem = document.getElementById("alert");
      alert_elem.innerText = "player load timeout.\n" + streamer + " is either not live, or an error occurred.\ntry again later, or try another streamer that is live.", alert_elem.style.display = "block"
    }}, 1e3);
    return embed
};

let alert_interval_id = toggle_alert(!0);

const embed = init_player();

window.onresize = function() {
  embed._iframe.width = window.innerWidth - player_settings.constraints.width;
  embed._iframe.height = window.innerHeight - player_settings.constraints.height;
};

window.api.receive("fromMain", data=>{
  console.log(atob(data));
  const jdata = JSON.parse(atob(data));
  switch(jdata.key) {
    case "btn.max":
      document.body.classList.add('maximized');
      break;
    case "btn.restore":
      document.body.classList.remove('maximized');
      break;
    default:
      break;
  }
});